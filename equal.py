#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
Christy is interning at HackerRank. One day she has to distribute some chocolates to her colleagues. She is biased towards her friends and may have distributed the chocolates unequally. One of the program managers gets to know this and orders Christy to make sure everyone gets equal number of chocolates.
But to make things difficult for the intern, she is ordered to equalize the number of chocolates for every colleague in the following manner,
For every operation, she can choose one of her colleagues and can do one of the three things.

1) She can give one chocolate to every colleague other than chosen one.
2 )She can give two chocolates to every colleague other than chosen one.
3 )She can give five chocolates to every colleague other than chosen one.
Result:
  Calculate minimum number of such operations needed to ensure that every colleague has the same number of chocolates.

Input Format
First line contains an integer denoting the number of testcases.  testcases follow.
Each testcase has lines. First line of each testcase contains an integer  denoting the number of colleagues. Second line contains N space separated integers denoting the current number of chocolates each colleague has.

Constraints
1 <= T <= 100
1 <= T <= 10000
Number of initial chocolates each colleague has < 1000

Output Format
 lines, each containing the minimum number of operations needed to make sure all colleagues have the same number of chocolates.

Sample Input

1 testcases
4 the number of colleagues
2 2 3 7  number of chocolates

Sample Output
2

Explanation
1st operation: Christy increases all elements by 1 except 3rd one
2 2 3 7 -> 3 3 3 8
2nd operation: Christy increases all element by 5 except last one
3 3 3 8 -> 8 8 8 8
'''
import sys
import timeit
def maxValue(items):
  maxIndex = len(items) - items[::-1].index(max(items)) - 1
  return items[maxIndex]

def getCase(selected, top):
  valid = lambda case, selected, top: (True if (selected+case) <= top else False)
  cases = [5, 2, 1]
  caseStudy = 0
  for case in cases:
    for item in selected:
      if(valid(case, item, top)):
        caseStudy = case
        break;
    if caseStudy:
      break;
  return caseStudy

def equal(chocolates):
  print('======')
  print(chocolates)
  top = chocolates[0]
  picked = maxValue(chocolates) or top
  startIndex = chocolates.index(picked)
  case = getCase(chocolates[startIndex:], picked)

  return [elem+case if not(startIndex == index) else elem for index, elem in enumerate(chocolates)]

if  __name__ =='__main__':
  start_time = timeit.default_timer()
  checkAllItems = lambda lst: lst[1:] == lst[:-1]
  testCaseNumber = 1
  testCaseList = []
  for test in range(int(testCaseNumber)):
    colleagues = 3187
    chocolates
    chocolates = [int(x) for x in chocolates.split()]
    testCaseList.append({
      "colleagues": colleagues,
      "chocolates": sorted(chocolates, reverse=True)
    })

  for testcase in testCaseList:
    result = testcase["chocolates"]
    colleague = testcase["colleagues"]
    operation = 0
    while not (checkAllItems(result)):
      result = equal(result)
      operation += 1
    elapsed = timeit.default_timer() - start_time
    sys.stdout.write('{0}'.format(operation))
    print(elapsed)
    sys.stdout.write('\n')
